#!/usr/bin/env python3
import sys
import re

def write_f(fn,content):
    with open(fn,"w") as f:
        f.write(content)

def read_f(fn):
    with open(fn,"r") as f:  
        txt = f.readlines()
        txtblock="".join(txt)
        return txtblock

def extract_code_to_files(fn,lang):
    pat_cpp_code = r"(?<=```" + lang + r")(.*?(\.h|\.cpp))(.*?)(?=```\n)"
    tuples = re.findall(pat_cpp_code,read_f(fn),flags=re.MULTILINE|re.DOTALL)
    for tuple in tuples:
        filename = tuple[0].strip()
        content = tuple[2]
        write_f(filename,content)

def extract_section(sec_name, text):
    pat = r"(?<=## " + name + r")(.*?)(?=^#|\Z)"
    tuples = re.findall(pat_cpp_code,text,flags=re.MULTILINE|re.DOTALL)
    if len(tuples):
        return tuples[1]
    else:
        return ""

def update_section(sec_name, repl_content, text):
    pat = r"(?<=## " + name + r")(.*?)(?=^#|\Z)"
    repl = r"## " + sec_name + r"\n" + content + r"\n"  
    re.sub(pat,repl,text,0 ,flags=flags=re.MULTILINE|re.DOTALL)

def extract_author(text, solFile):
        text=read_f(specFile)
        author_text = extract_section("Author", text).strip()
        return author_text 

def pack(solFile, specFile):
    import os
    files = [ f for f in os.listdir(".") if re.match(r'.*\.(cpp|h)',f)]
    text=read_f(specFile)
    author_txt = extract_section("Author", text).strip()
    if not author_txt:
        print( "Not Author specified!")
        exit (1)
    code_text = "".join([ "```cpp " + f + "\n" + read_f(f) + "```\n" for f in files])
    result = update_section("SolutionCode", code_text , text)
    with open(fn,"w") as packed:
        packed.write(result);


def unpack(fn):
    extract_code_to_files(fn,r"cpp")



#main
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("problem")
parser.add_argument("-p", "--pack", action='store_true',help="pack c++ .h .cpp files to under ## SolutionCode ")
parser.add_argument("-u", "--unpack", action='store_true',help="extract c++ .h .cpp files from ## SolutionCode ")
args = parser.parse_args()
pspec = args.problem + "Spec.md"
psolution = args.problem + "Solution.md"

if args.pack:
    pack(psolution, pspec)  
elif args.unpack:
    unpack(psolution)  








